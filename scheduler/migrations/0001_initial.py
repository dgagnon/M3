# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2019-12-07 11:58
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='ErrorLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(help_text='What was the exception.', max_length=64, verbose_name='Event')),
                ('error', models.CharField(blank=True, help_text='Verbose text of the error.', max_length=4096, null=True, verbose_name='Error')),
                ('value', models.CharField(blank=True, help_text='Value of the check.', max_length=4096, null=True, verbose_name='Value')),
                ('data', models.CharField(default='{}', help_text='JSON encoded metadata', max_length=4096, verbose_name='Metadata')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp for the event.', verbose_name='Timestamp')),
            ],
            options={
                'verbose_name': 'Check Error Log',
                'verbose_name_plural': 'Error Log',
            },
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(choices=[('bad', 'Failure'), ('good', 'Restored')], default='bad', help_text='What type of event are we logging.', max_length=4, verbose_name='Event')),
                ('value', models.CharField(help_text='Value of the event.', max_length=4096, verbose_name='Value')),
                ('data', models.CharField(default='{}', help_text='JSON encoded metadata', max_length=4096, verbose_name='Metadata')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp for the event.', verbose_name='Timestamp')),
            ],
            options={
                'verbose_name_plural': 'Threshold Events',
                'ordering': ['-pk'],
                'verbose_name': 'Threshold Event Log',
            },
        ),
        migrations.CreateModel(
            name='Historical',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(help_text='Value returned by check.', max_length=4096, verbose_name='Value')),
                ('data', models.CharField(default='{}', help_text='JSON encoded metadata', max_length=4096, verbose_name='Metadata')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp for the event.', verbose_name='Timestamp')),
                ('exported', models.BooleanField(default=False, help_text='Set to True if it was exported to InfluxDB and can be deleted', verbose_name='To Delete')),
                ('exportedk', models.BooleanField(default=False, help_text='Set to True if it was exported to Kafka and can be deleted', verbose_name='To Delete K')),
            ],
            options={
                'verbose_name_plural': 'Historical Data Log',
                'ordering': ['-pk'],
                'verbose_name': 'Historical data',
            },
        ),
        migrations.CreateModel(
            name='HostChecks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(help_text='Name of the check.', max_length=128, unique=True, verbose_name='Name')),
                ('checktype', models.CharField(choices=[('snmpgetint', 'SNMP Check Int'), ('snmpgetbool', 'SNMP Check Bool'), ('execint', 'Shell Exec Int'), ('execbool', 'Shell Exec Bool'), ('snmpgetstr', 'SNMP Check String'), ('execstr', 'Shell Exec String')], default='snmpgetint', help_text='The type of check to be performed.', max_length=16, verbose_name='Type')),
                ('interval', models.CharField(choices=[('10', 'every 10 seconds'), ('30', 'every 30 seconds'), ('60', 'every 60 seconds'), ('600', 'every 600 seconds')], default='30', help_text='Interval for the periodic task.', max_length=32, verbose_name='Interval')),
                ('arg', models.CharField(help_text='The argument for the check.  oid for snmp and cmd for exec.', max_length=1024, verbose_name='Argument')),
                ('unit', models.CharField(blank=True, default=None, help_text='Unit used for the check in the widget, i.e. A', max_length=4, verbose_name='Unit')),
                ('quotient', models.CharField(default='1', help_text='Divide or multiply the result. .01 = divided by 100', max_length=4, verbose_name='Quotient')),
                ('verbosename', models.CharField(help_text='Name of the widget as rendered on the page.', max_length=128, verbose_name='Full Name')),
                ('allhosts', models.BooleanField(default=False, help_text='When more than one host is assigned to a check, require them all to fail before failing the check.', verbose_name='Check all hosts to fail a threshold')),
                ('colorizesla', models.BooleanField(default=False, help_text='So that pumps do not always show a red widget', verbose_name='Colorize on SLA status instead of threshold')),
                ('status', models.CharField(default='{}', help_text='Ok, partial, failed, none', max_length=4096, verbose_name='Check global status')),
                ('statsinterval', models.IntegerField(default='300', help_text='How often, in seconds, we recalculate the stats.', verbose_name='Stats Interval')),
                ('enabled', models.BooleanField(default=True, help_text='Are checks for this host active ?', verbose_name='Active')),
                ('note', models.CharField(blank=True, default=None, help_text='Additional information that could be usefull.', max_length=4096, null=True, verbose_name='Note')),
            ],
            options={
                'verbose_name_plural': 'Checks',
                'ordering': ['-name'],
                'verbose_name': 'Host Check',
            },
        ),
        migrations.CreateModel(
            name='Hosts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(help_text='Name of the host.', max_length=128, unique=True, verbose_name='Name')),
                ('address', models.GenericIPAddressField(help_text='IP address of the host.', protocol='IPv4', verbose_name='IP')),
                ('community', models.CharField(default='public', help_text='Community for snmp checks.', max_length=128, verbose_name='Community')),
                ('enabled', models.BooleanField(default=True, help_text='Are checks for this host active ?', verbose_name='Active')),
                ('note', models.CharField(blank=True, default=None, help_text='Additional information that could be usefull.', max_length=4096, null=True, verbose_name='Note')),
            ],
            options={
                'verbose_name_plural': 'Hosts and Devices',
                'ordering': ['-name'],
                'verbose_name': 'Host Definition',
            },
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Key to the data.', max_length=128, unique=True, verbose_name='Key')),
                ('data', models.CharField(blank=True, default='{}', help_text='JSON encoded metadata', max_length=4096, null=True, verbose_name='Data')),
                ('timestamp', models.DateTimeField(auto_now=True, help_text='Timestamp for the last write to this key.', verbose_name='Timestamp')),
            ],
            options={
                'verbose_name': 'Metadata',
                'verbose_name_plural': 'Metadata',
            },
        ),
        migrations.CreateModel(
            name='Sla',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(help_text='Name of the SLA.', max_length=128, unique=True, verbose_name='Name')),
                ('verbosename', models.CharField(blank=True, help_text='Verbose name as displayed.', max_length=256, verbose_name='Full Name')),
                ('currentvalue', models.FloatField(blank=True, default='100', help_text='30 Day Rolling window value', null=True, verbose_name='Rolling window value')),
                ('status', models.CharField(default='OK', help_text='Current condition of the SLA.  Failing or OK', max_length=16, verbose_name='Current Status')),
                ('critical', models.FloatField(blank=True, default='99', help_text='Consider the SLA critical at this value.  Email alertgroups.', null=True, verbose_name='Value in percentile for criticality')),
                ('data', models.CharField(default='{}', help_text='JSON encoded metadata', max_length=4096, verbose_name='Metadata')),
                ('allchecks', models.BooleanField(default=False, help_text='When more than one check is assigned to an SLA, require all of them to fail before we consider the SLA event.', verbose_name='Require all checks to fail')),
                ('enabled', models.BooleanField(default=True, help_text='Is this SLA active ?', verbose_name='Active')),
                ('note', models.CharField(blank=True, default=None, help_text='Additional information that could be usefull.', max_length=4096, null=True, verbose_name='Note')),
                ('critgroups', models.ManyToManyField(blank=True, default=None, help_text='Groups to notify on critical, if applicable.', related_name='slacritgroup', to='auth.Group', verbose_name='Critical Groups')),
            ],
            options={
                'verbose_name_plural': 'SLAs',
                'ordering': ['name'],
                'verbose_name': 'Service Level Agreement',
            },
        ),
        migrations.CreateModel(
            name='SlaLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(choices=[('bad', 'Failure'), ('good', 'Restored')], default='bad', help_text='What type of event are we logging.', max_length=4, verbose_name='Event')),
                ('data', models.CharField(default='{}', help_text='JSON encoded metadata', max_length=4096, verbose_name='Metadata')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp for the event.', verbose_name='Timestamp')),
                ('sla', models.ForeignKey(blank=True, help_text='SLA this data relates to.', null=True, on_delete=django.db.models.deletion.PROTECT, to='scheduler.Sla')),
            ],
            options={
                'verbose_name_plural': 'SLA Event Log',
                'ordering': ['-pk'],
                'verbose_name': 'Sla Log',
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(help_text='Slug for the Template.', max_length=128, verbose_name='Name')),
                ('verbosename', models.CharField(help_text='Verbose name as displayed.', max_length=256, verbose_name='Full Name')),
                ('obj', models.CharField(choices=[('sla', 'SLA'), ('thold', 'Threshold'), ('error', 'Error'), ('trap', 'Trap')], help_text='The object type this template relates to.', max_length=32, verbose_name='Object type')),
                ('event', models.CharField(choices=[('warn', 'Warning'), ('crit', 'Critical'), ('ok', 'Recovery'), ('err', 'Error')], help_text='The event type this template relates to.', max_length=32, verbose_name='Event type')),
                ('subject', models.TextField(help_text='The template subject, django template syntax supported.', verbose_name='Template Subject')),
                ('content', models.TextField(help_text='The template content, django template syntax supported.', verbose_name='Template Content')),
                ('timestamp', models.DateTimeField(auto_now=True, help_text='Last modification date.', verbose_name='Timestamp')),
            ],
            options={
                'verbose_name_plural': 'Templates',
                'ordering': ['-pk'],
                'verbose_name': 'Template',
            },
        ),
        migrations.CreateModel(
            name='Thresholds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(help_text='Name of the thresholds.', max_length=128, unique=True, verbose_name='Name')),
                ('verbosename', models.CharField(blank=True, help_text='Verbose name as displayed.', max_length=256, verbose_name='Full Name')),
                ('type', models.CharField(choices=[('int', 'Integer'), ('bool', 'Boolean'), ('str', 'String')], default='int', help_text='The type of value we check against.', max_length=4, verbose_name='Type')),
                ('warnrepeat', models.IntegerField(blank=True, default=120, help_text='How often, in seconds, we send the warnings. Set to 0 to not rate limit, blank to send only once.', null=True, verbose_name='Warning Interval')),
                ('critrepeat', models.IntegerField(blank=True, default=120, help_text='How often, in seconds, we send the criticals. Set to 0 to not rate limit, blank to send only once.', null=True, verbose_name='Critical Interval')),
                ('lowwarn', models.FloatField(blank=True, default=None, help_text='For Integer checks, the low warning value.  for Internal Use.', null=True, verbose_name='INT Low Warning')),
                ('lowcrit', models.FloatField(blank=True, default=None, help_text='For Integer checks, the low critical value.  Affects the SLA.', null=True, verbose_name='INT Low Critical')),
                ('highwarn', models.FloatField(blank=True, default=None, help_text='For Integer checks, the high warning value.  for Internal Use.', null=True, verbose_name='INT High Warning')),
                ('highcrit', models.FloatField(blank=True, default=None, help_text='For Integer checks, the high critical value.  Affects the SLA.', null=True, verbose_name='INT High Critical')),
                ('boolgood', models.NullBooleanField(default=None, help_text='For Boolean checks, This is the expected value.  Anything else affects the SLA.  Leave UNKOWN to disable', verbose_name='BOOL Good')),
                ('boolbad', models.NullBooleanField(default=None, help_text='For Boolean checks, If seen, this affects the SLA.  All other values OK.  Leave UNKOWN to disable.', verbose_name='BOOL Bad')),
                ('boolwarn', models.NullBooleanField(default=None, help_text='For Boolean checks, If seen, this triggers a warning email.  Leave UNKOWN to disable.', verbose_name='BOOL Warn')),
                ('strgood', models.CharField(blank=True, default=None, help_text='For string checks. expected value.  Anything else affects the SLA.', max_length=1024, null=True, verbose_name='STR Good')),
                ('strwarn', models.CharField(blank=True, default=None, help_text='For string checks. If seen, this affects the SLA.', max_length=1024, null=True, verbose_name='STR Bad')),
                ('strbad', models.CharField(blank=True, default=None, help_text='For string checks. If seen, Emit a warning.  For internal use.', max_length=1024, null=True, verbose_name='STR Warning')),
                ('enabled', models.BooleanField(default=True, help_text='Is this threshold active ?', verbose_name='Active')),
                ('note', models.CharField(blank=True, default=None, help_text='Additional information that could be usefull.', max_length=4096, null=True, verbose_name='Note')),
                ('critgroups', models.ManyToManyField(blank=True, default=None, help_text='Groups to notify on critical, if applicable.', related_name='critgroup', to='auth.Group', verbose_name='Critical Groups')),
                ('crittpl', models.ForeignKey(blank=True, default=None, help_text='Template to use when sending out critical emails.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='crittpl', to='scheduler.Template', verbose_name='Critical template')),
                ('errgroups', models.ManyToManyField(blank=True, default=None, help_text='Groups to notify on errors, if applicable.', related_name='errgroup', to='auth.Group', verbose_name='Error Groups')),
                ('errtpl', models.ForeignKey(blank=True, default=None, help_text='Template to use when sending out error emails.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='errtpl', to='scheduler.Template', verbose_name='Error template')),
                ('okgroups', models.ManyToManyField(blank=True, default=None, help_text='Groups to notify on recovery, if applicable.', related_name='okgroup', to='auth.Group', verbose_name='Recovery Groups')),
                ('oktpl', models.ForeignKey(blank=True, default=None, help_text='Template to use when sending out recovery emails.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='oktpl', to='scheduler.Template', verbose_name='Recovery template')),
                ('warngroups', models.ManyToManyField(blank=True, default=None, help_text='Groups to notify on warning, if applicable.', related_name='warngroup', to='auth.Group', verbose_name='Warning Groups')),
                ('warntpl', models.ForeignKey(blank=True, default=None, help_text='Template to use when sending out warning emails.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='warntpl', to='scheduler.Template', verbose_name='Warning template')),
            ],
            options={
                'verbose_name_plural': 'Thresholds',
                'ordering': ['name'],
                'verbose_name': 'Threshold for check',
            },
        ),
        migrations.CreateModel(
            name='Trap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.CharField(help_text='OID received.', max_length=128, verbose_name='OID')),
                ('value', models.CharField(help_text='Message received', max_length=4096, verbose_name='Value')),
                ('timestamp', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp for the event.', verbose_name='Timestamp')),
                ('host', models.ForeignKey(blank=True, help_text='Host this data relates to.', null=True, on_delete=django.db.models.deletion.PROTECT, to='scheduler.Hosts')),
            ],
            options={
                'verbose_name_plural': 'Traps',
                'ordering': ['-pk'],
                'verbose_name': 'Trap',
            },
        ),
        migrations.AddField(
            model_name='sla',
            name='crittpl',
            field=models.ForeignKey(blank=True, default=None, help_text='Template to use when sending out critical emails when the SLA goes under the critical threshold.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='slacrittpl', to='scheduler.Template', verbose_name='Critical template'),
        ),
        migrations.AddField(
            model_name='sla',
            name='okgroups',
            field=models.ManyToManyField(blank=True, default=None, help_text='Groups to notify on recovery, if applicable.', related_name='slaokgroup', to='auth.Group', verbose_name='Recovery Groups'),
        ),
        migrations.AddField(
            model_name='sla',
            name='oktpl',
            field=models.ForeignKey(blank=True, default=None, help_text='Template to use when sending out recovery emails.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='slaoktpl', to='scheduler.Template', verbose_name='Recovery template'),
        ),
        migrations.AddField(
            model_name='sla',
            name='warngroups',
            field=models.ManyToManyField(blank=True, default=None, help_text='Groups to notify on warning, if applicable.', related_name='slawarngroup', to='auth.Group', verbose_name='Warning Groups'),
        ),
        migrations.AddField(
            model_name='sla',
            name='warntpl',
            field=models.ForeignKey(blank=True, default=None, help_text='Template to use when sending out warning emails when the SLA is being affected.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='slawarntpl', to='scheduler.Template', verbose_name='Warning template'),
        ),
        migrations.AddField(
            model_name='hostchecks',
            name='hosts',
            field=models.ManyToManyField(help_text='Hosts the check applies to.', to='scheduler.Hosts'),
        ),
        migrations.AddField(
            model_name='hostchecks',
            name='sla',
            field=models.ManyToManyField(blank=True, help_text='SLAs this check affects.', to='scheduler.Sla'),
        ),
        migrations.AddField(
            model_name='hostchecks',
            name='threshold',
            field=models.ManyToManyField(blank=True, help_text='Threshold the check adheres to.', to='scheduler.Thresholds'),
        ),
        migrations.AddField(
            model_name='historical',
            name='host',
            field=models.ForeignKey(help_text='Host this data relates to.', on_delete=django.db.models.deletion.CASCADE, to='scheduler.Hosts'),
        ),
        migrations.AddField(
            model_name='historical',
            name='hostcheck',
            field=models.ForeignKey(help_text='Check this data relates to.', on_delete=django.db.models.deletion.CASCADE, to='scheduler.HostChecks'),
        ),
        migrations.AddField(
            model_name='eventlog',
            name='host',
            field=models.ForeignKey(blank=True, help_text='Host this data relates to.', null=True, on_delete=django.db.models.deletion.PROTECT, to='scheduler.Hosts'),
        ),
        migrations.AddField(
            model_name='eventlog',
            name='hostcheck',
            field=models.ForeignKey(blank=True, help_text='Check this data relates to.', null=True, on_delete=django.db.models.deletion.PROTECT, to='scheduler.HostChecks'),
        ),
        migrations.AddField(
            model_name='eventlog',
            name='sla',
            field=models.ForeignKey(blank=True, help_text='SLA this data relates to.', null=True, on_delete=django.db.models.deletion.PROTECT, to='scheduler.Sla'),
        ),
        migrations.AddField(
            model_name='eventlog',
            name='threshold',
            field=models.ForeignKey(blank=True, help_text='Threshold the data relates to.', null=True, on_delete=django.db.models.deletion.CASCADE, to='scheduler.Thresholds'),
        ),
        migrations.AddField(
            model_name='errorlog',
            name='host',
            field=models.ForeignKey(blank=True, help_text='Host this data relates to.', null=True, on_delete=django.db.models.deletion.PROTECT, to='scheduler.Hosts'),
        ),
        migrations.AddField(
            model_name='errorlog',
            name='hostcheck',
            field=models.ForeignKey(blank=True, help_text='Check this data relates to.', null=True, on_delete=django.db.models.deletion.PROTECT, to='scheduler.HostChecks'),
        ),
    ]
