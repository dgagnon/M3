"""
Django settings for m4 project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""
import os

# Load the right settings based on the environement variable loaded in ~/.env
# You need to create this file manually when setting up a new environement
if os.getenv('ENVIRONEMENT', 'windev') == 'prod':
    # DBG = True
    DBG = False
    ALLOWED_HOSTS = ['example.com', '127.0.0.1']
    STATIC_URL = 'https://example.com/public/'
    SECURE_SSL_HOST = "example.com"
    DEFAULT_FROM_EMAIL = 'm4@example.com'
    SERVER_EMAIL = 'm4@example.com'
    EMAIL_SUBJECT_PREFIX = '[M4-PROD] '
    INFLUXDB_HOST = '127.0.0.1'
    DB_HOST = '127.0.0.1'
elif os.getenv('ENVIRONEMENT', 'windev') == 'windev':
    DBG = True
    # DBG = False
    ALLOWED_HOSTS = ['127.0.0.1']
    STATIC_URL = 'http://127.0.0.1:8000/public/'
    SECURE_SSL_HOST = "127.0.0.1"
    DEFAULT_FROM_EMAIL = 'm4@example.com'
    SERVER_EMAIL = 'm4@example.com'
    EMAIL_SUBJECT_PREFIX = '[M4-DEV] '
    INFLUXDB_HOST = '127.0.0.1'
    DB_HOST = '127.0.0.1'


BASE_DIR = '.'

FIXTURE_DIRS = (BASE_DIR + '/fixtures',)

# The email that will get error reports
ADMINS = [('Admin', 'm4@example.com')]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DBG

# Default message level for the MSGs
from django.contrib.messages import constants as message_constants
MESSAGE_LEVEL = message_constants.DEBUG

INTERNAL_IPS = ['127.0.0.1']

IGNORABLE_404_URLS = ['/robots.txt', '/favicon.ico']

STATIC_ROOT = BASE_DIR + '/public'
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.CachedStaticFilesStorage'

SECURE_BROWSER_XSS_FILTER = True

SECURE_CONTENT_TYPE_NOSNIFF = True

# SECURE_HSTS_SECONDS = 3600

# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# SECURE_SSL_REDIRECT = True

# USE_X_FORWARDED_HOST = True

# USE_X_FORWARDED_PORT = True

# SESSION_COOKIE_SECURE = True

# Specify URL since we override them
LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/login/'
LOGOUT_URL = '/logout/'

# Application definition

INSTALLED_APPS = [
    'jet.dashboard',
    'jet',
    'reversion',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cachalot',
    'django_extensions',
    'scheduler',
    'debug_toolbar',
    'djcelery',
    'webview',
    'compressor',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'webview.middleware.SetRemoteAddrFromForwardedFor',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.http.ConditionalGetMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.admindocs.middleware.XViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR + '/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': DBG,
            'context_processors': [
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.debug",
                'django.template.context_processors.request',
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages"
            ],
        },
    },
]

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'm4',
#         'USER': 'm4',
#         'PASSWORD': 'traC4Uwe',
#         'HOST': DB_HOST,
#         # disabled since it was causing key errors and slow downs
#         # Should try enabling it again in the future as this is a good feature
#         'ATOMIC_REQUESTS': False,
#         'CONN_MAX_AGE': 0,
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'db.sqlite3',
        # 'USER': 'm4',
        # 'PASSWORD': 'traC4Uwe',
        # 'HOST': DB_HOST,
        # disabled since it was causing key errors and slow downs
        # Should try enabling it again in the future as this is a good feature
        # 'ATOMIC_REQUESTS': False,
        # 'CONN_MAX_AGE': 0,
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'TIMEOUT': 0,
    }
}
CACHE_MIDDLEWARE_KEY_PREFIX = 'fpcache'
CACHE_MIDDLEWARE_SECONDS = 5
CACHE_MIDDLEWARE_ALIAS = 'default'

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

CACHALOT_ENABLED = True
CACHALOT_TIMEOUT = None # infinite
#CACHALOT_ONLY_CACHABLE_TABLES = ('webview_widgets', 'webview_userview', 'webview_userview_group', 'webview_userview_widgets', 'auth_user', 'auth_user_groups', 'auth_user_user_permissions', 'auth_group', 'auth_group_permissions', 'auth_permission', 'scheduler' )
CACHALOT_UNCACHABLE_TABLES = ('scheduler_historical', 'scheduler_metadata', 'webview_uimsg', 'reversion_revision', 'reversion_version', 'django_session', 'django_migrations', 'scheduler_errorlog', 'djcelery_taskstate', 'djcelery_workerstate', 'djcelery_periodictask', 'djcelery_periodictasks')

# Requires opendkim and full mta setup
EMAIL_HOST = '127.0.0.1'
EMAIL_PORT = '25'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# we use the DB so we can use the session store
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Toronto'

USE_I18N = True

USE_L10N = True

USE_TZ = True

USE_ETAGS = True

DEFAULT_CHARSET = 'UTF-8'

# This needs nodejs and lessc: http://lesscss.org/
COMPRESS_PRECOMPILERS = (('text/less', 'lessc {infile} {outfile}'),)

STATICFILES_FINDERS = ["django.contrib.staticfiles.finders.FileSystemFinder", "django.contrib.staticfiles.finders.AppDirectoriesFinder", "compressor.finders.CompressorFinder"]

# Needed for django debug toolbar logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'incremental': True,
    'root': {
        'level': 'DEBUG',
    },
}

# Configure normal logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/debug.log',
            'filters': ['require_debug_true'],
            'formatter': 'verbose'
        },
        'console': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false'],
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'propagate': True,
            'level': 'ERROR',
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'propagate': True,
            'level': 'ERROR',
        },
        'm4': {
            'handlers': ['file', 'console'],
            'propagate': True,
            'level': 'DEBUG',
        },
    },
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# SECURITY WARNING: keep the secret key used in production secret!
# This should be unique per environement.
SECRET_KEY = 'ke0rm8$asw3@_7n9cpmtltqs=5l39r($at+_0txmm(#u#up3+!'

DEBUG_TOOLBAR_PATCH_SETTINGS = False

DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
    'cachalot.panels.CachalotPanel',
]

# Override for when we really want to display the debug bar
def show_toolbar(request):
    return DBG
DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK" : show_toolbar,
}

# tell django where to find the root urls and the wsgi bootstrap.  required since we use the home folder as the django root
ROOT_URLCONF = 'urls'
WSGI_APPLICATION = 'wsgi.application'

# This requires rabbitmq
BROKER_URL = 'amqp://m4:changeme@localhost:5672/m4'
CELERY_ACCEPT_CONTENT = ['pickle']
CELERY_TASK_SERIALIZER = 'pickle'
CELERY_RESULT_SERIALIZER = 'pickle'
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
CELERY_SEND_EVENTS = True
CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
CELERY_RESULT_PERSISTENT = False
CELERY_TASK_RESULT_EXPIRES = 86400
if DBG:
    CELERY_SEND_TASK_ERROR_EMAILS = False
else:
    CELERY_SEND_TASK_ERROR_EMAILS = True
# Since settings is loaded before anything else, we are bootstraping djcelery here
import djcelery
djcelery.setup_loader()
